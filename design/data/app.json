{
   entities: {
      Entity: {
         pos: util.math.Vec2,
         dir: util.math.Vec2,
         vel: util.math.Vec2,
         sprite: util.graphics.Drawable,
         components: components.ComponentManager,
         update: function(){
            components.exec();
         },
         draw: function(){
            sprite.draw();
         },
         getPos: function(){
            return pos;
         },
         setPos: function(util.math.Vec2 pos){
            pos = pos;
         },
         getDir: function(){
            return dir;
         },
         setDir: function(util.math.Vec2 dir){
            dir = dir;
         },
         getVel: function(){
            return vel;
         },
         setVel: function(util.math.Vec2 vel){
            vel = vel;
         }
      }
   },

   components: {
      ComponentManager: {
         components: {},
         has: function(key){
            return get(key) === undefined;
         },
         set: function(key, val) {
            components[key] = val;
         },
         get: function(key) {
            return components[key];
         },
         update: function(){
            for (c in components){
               if (components[c] instanceof components.Component){
                  components[c].exec();
               }
            }
         }
      },
      Component: {
         exec: function(){
            // TODO: override
         }
      },
      Movement::Component: {
         entity: entities.Entity,
         controller: util.input.Controller,
         exec: function () {
            if (controller.isSet("UP")) {
               entity.setVel(null, -1);
            }
            if (controller.isSet("RIGHT")) {
               entity.setVel(1, null);
            }
            /* ... */
         }
      },
      Drawable::Component: {
            Drawable: function(util.graphics.Renderer2D renderer, entities.Entity entity, imgPath, width, height, 
                  srcX, srcY, srcWdith, srcHeight){
               renderer = renderer;
               entity = entities.Entity;
               size = new util.math.Vec2(width, height);
               img = new Image();
               img.src = imgPath;
            },
            srcImg: {
               x: srcX || 0,
               y: srcY || 0,
               width: srcWidth || width,
               height: srcHeight || height
            },
            renderer: util.graphics.Renderer2D,
            entity = entities.Entity,
            size: util.math.Vec2,
            img: HTMLImageElement,
            exec: function(){
               pos = entity.getPos().get();
               renderer.render(img, srcImg.x, srcImg.y, srcImg.width, srcImg.height, pos.x, pos.y, size.w, size.h);
            },
            getSize: function(){
               return size;
            },
            setSize: function(util.math.Vec2 vec2){
               size = vec2;
            }
      },
      Anim::Drawable: {
         Anim: function(Drawable sprites[]) {
            sprites: sprites;
         },
         current: 0,
         doOnCurrent: function(util.math.Vec2 dir) {
            // TODO: override
            dir = dir.get();

            if (dir.x > 0) {
               _current = 1;
            } else if (dir.x < 0) {
               _current = 2;
            } else {
               _current = 0;
            }
            
            return _current;
         },
         exec: function(){
            dir = entity.getDir().get();
            current = doOnCurrent(dir);
            sprites[current].exec();
         },
         getSize: function(){
            return sprites[current].getSize();
         },
         setSize: function(util.math.Vec2 vec2){
            sprites[current].setSize(vec2);
         },
         onCurrent: function(cb) {
            doOnCurrent = cb;
         }
      },
      Gameloop::Component {
         // TODO: Implement
      }
   },
      
   util: {
      graphics: {
         Renderer2D: {
            Renderer2D: function(width, height){
               canvas = document.createElement("canvas");
               canvas.setAttribute("width", width);
               canvas.setAttribute("height", height);
               ctx = canvas.getContext("2d");
            }
            canvas: HTMLCanvasElement,
            ctx: CanvasRenderingContext2D,
            render: function(HTMLImageElement img, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight){
            },
            clear: function(x, y, width, height) {
               ctx.clearRect(x || 0, y || 0, width || canvas.width, height || canvas.height);
            }
         },
         Map: {
            // TODO: Define. This should be similar to a Drawable, but not quite the same thing. For one, it's not associated with an entity. Also, a map should contain all the tile information for the map it represents, as well as the image resource to be drawn for each tile. Ideally, a map should be drawn on its own canvas, but doesn't have to be so.
         }
      },
      input: {
         Controller: {
            keys: {
               UP: 89,
               DOWN: 90,
               LEFT: 91,
               /* ... */
            },
            controller: {
            },
            set: function (key, val) {
               controller[key] = val;
            },
            isSet: function (key) {
               return controller[keys[key]]; 
            }
         },
      },      
      math: {
         Vec2: {
            el: {
               x: 0,
               y: 0,
            },
            add: function(util.math.Vec2 vec2){
               vec2 = vec2.get();
               el.x += vec2.x;
               el.y += vec2.y;
            },
            subt: function(util.math.Vec2 vec2){
               vec2 = vec2.get();
               el.x -= vec2.x;
               el.y -= vec2.y;
            },
            mult: function(scal){
               el.x *= scal;
               el.y *= scal;
            },
            normalize: function(){
               // TODO: implement
            },
            get: function(){
               return el;
            },
            set: function(x, y){ 
               el.x = x || el.x;
               el.y = y || el.y;
               return el;
            }
         }
      }
   }
}

